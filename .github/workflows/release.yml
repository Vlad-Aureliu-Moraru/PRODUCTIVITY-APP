name: Release TaskWatch Application

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'  # Trigger on tags like 1.1.9
  workflow_dispatch:  # Allow manual trigger from GitHub UI

permissions:
  contents: write  # Required for creating releases and uploading assets

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: TaskWatch v${{ github.ref_name }}
          body: "Official release of TaskWatch version ${{ github.ref_name }}.\n\nA complex to-do app with reminders and an adaptive Pomodoro timer."
          draft: false
          prerelease: false

  build-linux:
    name: Build and Package for Linux
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create bin and resources directories
        run: mkdir -p bin dist/resources

      - name: Verify source and icon files
        run: |
          echo "Listing all source files:"
          find src -name "*.java" -type f || { echo "Error: No .java files found in src/"; exit 1; }
          echo "Checking critical files:"
          for file in src/Main.java \
                     src/AppLogic/Directory.java \
                     src/AppLogic/Task.java \
                     src/AppLogic/Note.java \
                     src/AppLogic/EventHandler.java \
                     src/AppLogic/FileHandler.java \
                     src/AppLogic/FontLoader.java \
                     src/UserInterface/FRAME_main.java \
                     src/UserInterface/PANEL_mainmenu.java \
                     src/UserInterface/PANEL_navbar.java \
                     src/UserInterface/PANEL_list.java \
                     src/UserInterface/ColorTheme.java \
                     src/CLI/PANEL_cli.java \
                     src/CLI/CommandHelper.java \
                     src/REMINDER/PANEL_item.java \
                     src/REMINDER/PANEL_reminder.java \
                     src/REMINDER/PANEL_thisweek.java \
                     src/REMINDER/PANEL_todaylist.java \
                     src/SubPanels/modifiedTextArea.java \
                     src/SubPanels/PANEL_taskinfo.java \
                     src/SubPanels/PANEL_help.java \
                     src/SubPanels/PANEL_clock.java \
                     src/SubPanels/PANEL_noteinfo.java \
                     src/SubElements/PANEL_dir.java \
                     src/SubElements/PANEL_note.java \
                     src/SubElements/PANEL_task.java \
                     src/ConfigRelated/ConfigLoader.java \
                     src/ConfigRelated/ThemeLoader.java \
                     src/ConfigRelated/ThemeManager.java; do
            if [ ! -f "$file" ]; then
              echo "Error: $file not found"
              exit 1
            fi
          done
          if [ ! -f TaskWatch.png ]; then
            echo "Error: TaskWatch.png not found in project root"
            exit 1
          fi
          if [ ! -d src/fonts ]; then
            echo "Error: src/fonts directory not found"
            exit 1
          fi
          echo "Listing root directory:"
          ls -l

      - name: Compile Java code
        run: javac -d bin src/**/*.java

      - name: List compiled files
        run: ls -R bin  # Debug: Show compiled .class files

      - name: Create JAR file with fonts
        run: jar --create --file TaskWatch.jar --main-class Main -C bin . -C src fonts

      - name: Verify JAR file
        run: |
          if [ ! -f TaskWatch.jar ]; then
            echo "Error: TaskWatch.jar not found in project root"
            exit 1
          fi
          echo "TaskWatch.jar created successfully"
          ls -l TaskWatch.jar
          jar tf TaskWatch.jar | grep ".ttf"  # Verify fonts in JAR

      - name: Copy JAR and icon to resources
        run: |
          cp TaskWatch.jar dist/resources/
          cp TaskWatch.png dist/resources/
          echo "Listing resources directory:"
          ls -l dist/resources/

      - name: Clean dist directory
        run: rm -rf dist/TaskWatch

      - name: Package for Linux using jpackage
        run: |
          jpackage --type app-image \
                   --name TaskWatch \
                   --app-version ${{ github.ref_name }} \
                   --main-jar TaskWatch.jar \
                   --main-class Main \
                   --icon dist/resources/TaskWatch.png \
                   --input dist/resources \
                   --dest dist
          ls -lR dist  # Debug: List dist contents after jpackage
          tar -czf TaskWatch-${{ github.ref_name }}-Linux.tar.gz -C dist TaskWatch
          ls -l TaskWatch-${{ github.ref_name }}-Linux.tar.gz  # Debug: Confirm tar file
        continue-on-error: true

      - name: Upload Linux Release Asset
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: TaskWatch-${{ github.ref_name }}-Linux.tar.gz
          tag_name: ${{ github.ref_name }}
          name: TaskWatch v${{ github.ref_name }}

  build-windows:
    name: Build and Package for Windows
    needs: create-release
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install WiX Toolset
        run: |
          choco install wixtoolset --version 3.11.2
          echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" >> $GITHUB_PATH
        shell: bash

      - name: Create bin and resources directories
        run: mkdir -p bin dist/resources
        shell: bash

      - name: Verify directory creation
        run: dir dist /s
        shell: cmd

      - name: Verify source and icon files
        run: |
          echo "Listing all source files:"
          find src -name "*.java" -type f || { echo "Error: No .java files found in src/"; exit 1; }
          echo "Checking critical files:"
          for file in src/Main.java \
                     src/AppLogic/Directory.java \
                     src/AppLogic/Task.java \
                     src/AppLogic/Note.java \
                     src/AppLogic/EventHandler.java \
                     src/AppLogic/FileHandler.java \
                     src/AppLogic/FontLoader.java \
                     src/UserInterface/FRAME_main.java \
                     src/UserInterface/PANEL_mainmenu.java \
                     src/UserInterface/PANEL_navbar.java \
                     src/UserInterface/PANEL_list.java \
                     src/UserInterface/ColorTheme.java \
                     src/CLI/PANEL_cli.java \
                     src/CLI/CommandHelper.java \
                     src/REMINDER/PANEL_item.java \
                     src/REMINDER/PANEL_reminder.java \
                     src/REMINDER/PANEL_thisweek.java \
                     src/REMINDER/PANEL_todaylist.java \
                     src/SubPanels/modifiedTextArea.java \
                     src/SubPanels/PANEL_taskinfo.java \
                     src/SubPanels/PANEL_help.java \
                     src/SubPanels/PANEL_clock.java \
                     src/SubPanels/PANEL_noteinfo.java \
                     src/SubElements/PANEL_dir.java \
                     src/SubElements/PANEL_note.java \
                     src/SubElements/PANEL_task.java \
                     src/ConfigRelated/ConfigLoader.java \
                     src/ConfigRelated/ThemeLoader.java \
                     src/ConfigRelated/ThemeManager.java; do
            if [ ! -f "$file" ]; then
              echo "Error: $file not found"
              exit 1
            fi
          done
          if [ ! -f TaskWatch.ico ]; then
            echo "Error: TaskWatch.ico not found in project root"
            exit 1
          fi
          if [ ! -d src/fonts ]; then
            echo "Error: src/fonts directory not found"
            exit 1
          fi
          echo "Listing root directory:"
          ls -l
        shell: bash

      - name: Compile Java code
        run: javac -d bin src/**/*.java
        shell: bash

      - name: List compiled files
        run: dir bin /s  # Debug: Show compiled .class files
        shell: cmd

      - name: Create JAR file with fonts
        run: jar --create --file TaskWatch.jar --main-class Main -C bin . -C src fonts
        shell: bash

      - name: Verify JAR file
        run: |
          if not exist TaskWatch.jar (
            echo Error: TaskWatch.jar not found in project root
            exit /b 1
          )
          echo TaskWatch.jar created successfully
          dir TaskWatch.jar
          REM Verify fonts in JAR
          jar tf TaskWatch.jar | findstr ".ttf"
        shell: cmd

      - name: Copy JAR and icon to resources
        run: |
          copy TaskWatch.jar dist\resources\
          copy TaskWatch.ico dist\resources\
          dir dist\resources\
        shell: cmd

      - name: Clean dist directory
        run: |
          if exist dist\TaskWatch (
            rmdir /s /q dist\TaskWatch
          )
        shell: cmd
        continue-on-error: true

      - name: Package for Windows using jpackage
        run: |
          jpackage --type exe \
                   --name TaskWatch \
                   --app-version ${{ github.ref_name }} \
                   --main-jar TaskWatch.jar \
                   --main-class Main \
                   --icon dist/resources/TaskWatch.ico \
                   --input dist/resources \
                   --dest dist
          dir dist /s  # Debug: List dist contents after jpackage
        shell: bash

      - name: Upload Windows Release Asset
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: dist/TaskWatch.exe
          tag_name: ${{ github.ref_name }}
          name: TaskWatch v${{ github.ref_name }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
